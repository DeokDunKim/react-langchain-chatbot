{"ast":null,"code":"class MessageParser {\n  constructor(actionProvider, state) {\n    this.actionProvider = actionProvider;\n    this.state = state;\n  }\n  parse(message) {\n    // Log the latest message content\n    console.log(\"Latest Message:\", message);\n\n    // Log all previous messages\n    const allPreviousMessages = this.state.messages.map(msg => msg);\n    console.log(\"All Previous Messages:\", allPreviousMessages);\n    const greetingMessage = this.createChatBotMessage(\"Hi, friend.\");\n    this.updateChatbotState(greetingMessage);\n  }\n  updateChatbotState(message) {\n    // NOTE: This function is set in the constructor, and is passed in \n    // from the top level Chatbot component. The setState function here     \n    // actually manipulates the top level state of the Chatbot, so it's    \n    // important that we make sure that we preserve the previous state.\n\n    this.setState(prevState => ({\n      ...prevState,\n      messages: [...prevState.messages, message]\n    }));\n  }\n}\nexport default MessageParser;","map":{"version":3,"names":["MessageParser","constructor","actionProvider","state","parse","message","console","log","allPreviousMessages","messages","map","msg","greetingMessage","createChatBotMessage","updateChatbotState","setState","prevState"],"sources":["/Users/idasilfverskiold/gptSandbox/reactlangchain/sandbox/src/components/MessageParser.js"],"sourcesContent":["class MessageParser {\n    constructor(actionProvider, state) {\n        this.actionProvider = actionProvider;\n        this.state = state;\n    }\n\n    parse(message) {\n        // Log the latest message content\n        console.log(\"Latest Message:\", message);\n\n        // Log all previous messages\n        const allPreviousMessages = this.state.messages.map(msg => msg);\n        console.log(\"All Previous Messages:\", allPreviousMessages);\n        const greetingMessage = this.createChatBotMessage(\"Hi, friend.\")\n        this.updateChatbotState(greetingMessage)\n    }\n\n    updateChatbotState(message) {\n \n        // NOTE: This function is set in the constructor, and is passed in \n         // from the top level Chatbot component. The setState function here     \n         // actually manipulates the top level state of the Chatbot, so it's    \n          // important that we make sure that we preserve the previous state.\n         \n            \n           this.setState(prevState => ({\n                ...prevState, messages: [...prevState.messages, message]\n            }))\n          }\n}\n\nexport default MessageParser;"],"mappings":"AAAA,MAAMA,aAAa,CAAC;EAChBC,WAAWA,CAACC,cAAc,EAAEC,KAAK,EAAE;IAC/B,IAAI,CAACD,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,KAAK,GAAGA,KAAK;EACtB;EAEAC,KAAKA,CAACC,OAAO,EAAE;IACX;IACAC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,OAAO,CAAC;;IAEvC;IACA,MAAMG,mBAAmB,GAAG,IAAI,CAACL,KAAK,CAACM,QAAQ,CAACC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAAC;IAC/DL,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEC,mBAAmB,CAAC;IAC1D,MAAMI,eAAe,GAAG,IAAI,CAACC,oBAAoB,CAAC,aAAa,CAAC;IAChE,IAAI,CAACC,kBAAkB,CAACF,eAAe,CAAC;EAC5C;EAEAE,kBAAkBA,CAACT,OAAO,EAAE;IAExB;IACC;IACA;IACC;;IAGC,IAAI,CAACU,QAAQ,CAACC,SAAS,KAAK;MACvB,GAAGA,SAAS;MAAEP,QAAQ,EAAE,CAAC,GAAGO,SAAS,CAACP,QAAQ,EAAEJ,OAAO;IAC3D,CAAC,CAAC,CAAC;EACL;AACV;AAEA,eAAeL,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}