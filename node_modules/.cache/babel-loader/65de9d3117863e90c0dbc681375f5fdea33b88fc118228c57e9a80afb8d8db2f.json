{"ast":null,"code":"class ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  }\n  greet() {\n    const greetingMessage = this.createChatBotMessage(\"Hi, friend.\");\n    this.updateChatbotState(greetingMessage);\n  }\n  updateChatbotState(message) {\n    const userInput = message.text.toLowerCase();\n\n    // Access all previous messages\n    const allPreviousMessages = this.state.messages;\n    console.log(\"new message\", message);\n    console.log(\"all previous messages\", allPreviousMessages);\n\n    // NOTE: This function is set in the constructor, and is passed in      // from the top level Chatbot component. The setState function here     // actually manipulates the top level state of the Chatbot, so it's     // important that we make sure that we preserve the previous state.\n    if (lowerCaseMessage.includes(\"hello\")) {\n      this.actionProvider.greet();\n    }\n    this.setState(prevState => ({\n      ...prevState,\n      messages: [...prevState.messages, message]\n    }));\n  }\n}\nexport default ActionProvider;","map":{"version":3,"names":["ActionProvider","constructor","createChatBotMessage","setStateFunc","setState","greet","greetingMessage","updateChatbotState","message","userInput","text","toLowerCase","allPreviousMessages","state","messages","console","log","lowerCaseMessage","includes","actionProvider","prevState"],"sources":["/Users/idasilfverskiold/gptSandbox/reactlangchain/sandbox/src/components/MessageParser.js"],"sourcesContent":["class ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  }\n\n  greet() {\n    const greetingMessage = this.createChatBotMessage(\"Hi, friend.\");\n    this.updateChatbotState(greetingMessage);\n  }\n\n  updateChatbotState(message) {\n    const userInput = message.text.toLowerCase();\n\n    // Access all previous messages\n    const allPreviousMessages = this.state.messages;\n    console.log(\"new message\", message);\n    console.log(\"all previous messages\", allPreviousMessages);\n\n    // NOTE: This function is set in the constructor, and is passed in      // from the top level Chatbot component. The setState function here     // actually manipulates the top level state of the Chatbot, so it's     // important that we make sure that we preserve the previous state.\n    if (lowerCaseMessage.includes(\"hello\")) {\n      this.actionProvider.greet();\n    }\n    this.setState((prevState) => ({\n      ...prevState,\n      messages: [...prevState.messages, message],\n    }));\n  }\n}\n\nexport default ActionProvider;\n"],"mappings":"AAAA,MAAMA,cAAc,CAAC;EACnBC,WAAWA,CAACC,oBAAoB,EAAEC,YAAY,EAAE;IAC9C,IAAI,CAACD,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACE,QAAQ,GAAGD,YAAY;EAC9B;EAEAE,KAAKA,CAAA,EAAG;IACN,MAAMC,eAAe,GAAG,IAAI,CAACJ,oBAAoB,CAAC,aAAa,CAAC;IAChE,IAAI,CAACK,kBAAkB,CAACD,eAAe,CAAC;EAC1C;EAEAC,kBAAkBA,CAACC,OAAO,EAAE;IAC1B,MAAMC,SAAS,GAAGD,OAAO,CAACE,IAAI,CAACC,WAAW,CAAC,CAAC;;IAE5C;IACA,MAAMC,mBAAmB,GAAG,IAAI,CAACC,KAAK,CAACC,QAAQ;IAC/CC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAER,OAAO,CAAC;IACnCO,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEJ,mBAAmB,CAAC;;IAEzD;IACA,IAAIK,gBAAgB,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;MACtC,IAAI,CAACC,cAAc,CAACd,KAAK,CAAC,CAAC;IAC7B;IACA,IAAI,CAACD,QAAQ,CAAEgB,SAAS,KAAM;MAC5B,GAAGA,SAAS;MACZN,QAAQ,EAAE,CAAC,GAAGM,SAAS,CAACN,QAAQ,EAAEN,OAAO;IAC3C,CAAC,CAAC,CAAC;EACL;AACF;AAEA,eAAeR,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}