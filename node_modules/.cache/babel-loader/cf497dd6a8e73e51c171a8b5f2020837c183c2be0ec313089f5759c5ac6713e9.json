{"ast":null,"code":"class MessageParser {\n  constructor(createChatBotMessage, setStateFunc) {\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  }\n  sendMessage() {\n    // Log all previous messages\n    const greetingMessage = this.createChatBotMessage(\"Hi, friend.\");\n    this.updateChatbotState(greetingMessage);\n  }\n  parse(message) {\n    // Log the latest message content\n    console.log(\"Latest Message:\", message);\n    this.sendMessage();\n  }\n  updateChatbotState(message) {\n    // NOTE: This function is set in the constructor, and is passed in \n    // from the top level Chatbot component. The setState function here     \n    // actually manipulates the top level state of the Chatbot, so it's    \n    // important that we make sure that we preserve the previous state.\n\n    this.setState(prevState => ({\n      ...prevState,\n      messages: [...prevState.messages, message]\n    }));\n  }\n}\nexport default MessageParser;","map":{"version":3,"names":["MessageParser","constructor","createChatBotMessage","setStateFunc","setState","sendMessage","greetingMessage","updateChatbotState","parse","message","console","log","prevState","messages"],"sources":["/Users/idasilfverskiold/gptSandbox/reactlangchain/sandbox/src/components/MessageParser.js"],"sourcesContent":["class MessageParser {\n    \n    constructor(createChatBotMessage, setStateFunc) {\n        this.createChatBotMessage = createChatBotMessage;\n        this.setState = setStateFunc;\n      }\n\n    sendMessage () {\n        // Log all previous messages\n        const greetingMessage = this.createChatBotMessage(\"Hi, friend.\")\n        this.updateChatbotState(greetingMessage)\n    }\n\n    parse(message) {\n        // Log the latest message content\n        console.log(\"Latest Message:\", message);\n        this.sendMessage()\n        \n    }\n\n    updateChatbotState(message) {\n \n        // NOTE: This function is set in the constructor, and is passed in \n         // from the top level Chatbot component. The setState function here     \n         // actually manipulates the top level state of the Chatbot, so it's    \n          // important that we make sure that we preserve the previous state.\n         \n            \n           this.setState(prevState => ({\n                ...prevState, messages: [...prevState.messages, message]\n            }))\n          }\n}\n\nexport default MessageParser;"],"mappings":"AAAA,MAAMA,aAAa,CAAC;EAEhBC,WAAWA,CAACC,oBAAoB,EAAEC,YAAY,EAAE;IAC5C,IAAI,CAACD,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACE,QAAQ,GAAGD,YAAY;EAC9B;EAEFE,WAAWA,CAAA,EAAI;IACX;IACA,MAAMC,eAAe,GAAG,IAAI,CAACJ,oBAAoB,CAAC,aAAa,CAAC;IAChE,IAAI,CAACK,kBAAkB,CAACD,eAAe,CAAC;EAC5C;EAEAE,KAAKA,CAACC,OAAO,EAAE;IACX;IACAC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,OAAO,CAAC;IACvC,IAAI,CAACJ,WAAW,CAAC,CAAC;EAEtB;EAEAE,kBAAkBA,CAACE,OAAO,EAAE;IAExB;IACC;IACA;IACC;;IAGC,IAAI,CAACL,QAAQ,CAACQ,SAAS,KAAK;MACvB,GAAGA,SAAS;MAAEC,QAAQ,EAAE,CAAC,GAAGD,SAAS,CAACC,QAAQ,EAAEJ,OAAO;IAC3D,CAAC,CAAC,CAAC;EACL;AACV;AAEA,eAAeT,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}