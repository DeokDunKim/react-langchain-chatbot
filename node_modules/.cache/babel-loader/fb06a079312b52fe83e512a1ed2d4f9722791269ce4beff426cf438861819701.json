{"ast":null,"code":"import { ChatOpenAI } from \"langchain/chat_models/openai\";\nimport { HumanMessage, SystemMessage } from \"langchain/schema\";\n\n// this class is responsible for processing new messages from the user and getting a reply from OpenAI\n// it uses a human/system messages array that is sent in continously to OpenAI\n// you can log the newMessage and oldMessages to see what they look like\n\nconst LangchainProcessor = async (newMessage, oldMessages) => {\n  // (!!) remember to add your OpenAI API key to the .env file\n  const chat = new ChatOpenAI({\n    temperature: 0,\n    openAIApiKey: process.env.REACT_APP_OPEN_AI_API_KEY\n  });\n  try {\n    // recreate the formatted messages array with the previous messages every time a new message comes in from the user\n    const formattedMessages = oldMessages.map(msg => {\n      if (msg.type === \"bot\") {\n        return new SystemMessage(msg.message);\n      } else {\n        return new HumanMessage(msg.message);\n      }\n    });\n\n    // Add the new human message to the list\n    formattedMessages.push(new HumanMessage(newMessage));\n\n    // call OpenAI to get a reply\n    const result = await chat.predictMessages(formattedMessages);\n\n    // Extract the content from the AIMessage\n    const botResponseContent = result.content;\n\n    // return the response\n    return botResponseContent;\n  } catch (error) {\n    console.error(\"Error processing message with OpenAI:\", error);\n    return \"Sorry, I faced an error processing your message.\";\n  }\n};\n_c = LangchainProcessor;\nexport default LangchainProcessor;\nvar _c;\n$RefreshReg$(_c, \"LangchainProcessor\");","map":{"version":3,"names":["ChatOpenAI","HumanMessage","SystemMessage","LangchainProcessor","newMessage","oldMessages","chat","temperature","openAIApiKey","process","env","REACT_APP_OPEN_AI_API_KEY","formattedMessages","map","msg","type","message","push","result","predictMessages","botResponseContent","content","error","console","_c","$RefreshReg$"],"sources":["/Users/idasilfverskiold/gptSandbox/reactlangchain/sandbox/src/components/LangchainProcessor.js"],"sourcesContent":["import { ChatOpenAI } from \"langchain/chat_models/openai\";\nimport { HumanMessage, SystemMessage } from \"langchain/schema\";\n\n// this class is responsible for processing new messages from the user and getting a reply from OpenAI\n// it uses a human/system messages array that is sent in continously to OpenAI\n// you can log the newMessage and oldMessages to see what they look like\n\nconst LangchainProcessor = async (newMessage, oldMessages) => {\n\n    // (!!) remember to add your OpenAI API key to the .env file\n    const chat = new ChatOpenAI({\n        temperature: 0,\n        openAIApiKey: process.env.REACT_APP_OPEN_AI_API_KEY\n    });\n\n    try {\n        // recreate the formatted messages array with the previous messages every time a new message comes in from the user\n        const formattedMessages = oldMessages.map(msg => {\n            if (msg.type === \"bot\") {\n                return new SystemMessage(msg.message);\n            } else {\n                return new HumanMessage(msg.message);\n            }\n        });\n\n        // Add the new human message to the list\n        formattedMessages.push(new HumanMessage(newMessage));\n\n        // call OpenAI to get a reply\n        const result = await chat.predictMessages(formattedMessages);\n\n        // Extract the content from the AIMessage\n        const botResponseContent = result.content;\n\n        // return the response\n        return botResponseContent;\n\n    } catch (error) {\n        console.error(\"Error processing message with OpenAI:\", error);\n        return \"Sorry, I faced an error processing your message.\";\n    }\n}\n\nexport default LangchainProcessor;\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,8BAA8B;AACzD,SAASC,YAAY,EAAEC,aAAa,QAAQ,kBAAkB;;AAE9D;AACA;AACA;;AAEA,MAAMC,kBAAkB,GAAG,MAAAA,CAAOC,UAAU,EAAEC,WAAW,KAAK;EAE1D;EACA,MAAMC,IAAI,GAAG,IAAIN,UAAU,CAAC;IACxBO,WAAW,EAAE,CAAC;IACdC,YAAY,EAAEC,OAAO,CAACC,GAAG,CAACC;EAC9B,CAAC,CAAC;EAEF,IAAI;IACA;IACA,MAAMC,iBAAiB,GAAGP,WAAW,CAACQ,GAAG,CAACC,GAAG,IAAI;MAC7C,IAAIA,GAAG,CAACC,IAAI,KAAK,KAAK,EAAE;QACpB,OAAO,IAAIb,aAAa,CAACY,GAAG,CAACE,OAAO,CAAC;MACzC,CAAC,MAAM;QACH,OAAO,IAAIf,YAAY,CAACa,GAAG,CAACE,OAAO,CAAC;MACxC;IACJ,CAAC,CAAC;;IAEF;IACAJ,iBAAiB,CAACK,IAAI,CAAC,IAAIhB,YAAY,CAACG,UAAU,CAAC,CAAC;;IAEpD;IACA,MAAMc,MAAM,GAAG,MAAMZ,IAAI,CAACa,eAAe,CAACP,iBAAiB,CAAC;;IAE5D;IACA,MAAMQ,kBAAkB,GAAGF,MAAM,CAACG,OAAO;;IAEzC;IACA,OAAOD,kBAAkB;EAE7B,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC7D,OAAO,kDAAkD;EAC7D;AACJ,CAAC;AAAAE,EAAA,GAlCKrB,kBAAkB;AAoCxB,eAAeA,kBAAkB;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}