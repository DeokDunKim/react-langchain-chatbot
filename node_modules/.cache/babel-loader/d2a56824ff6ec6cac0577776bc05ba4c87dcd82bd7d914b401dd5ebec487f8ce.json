{"ast":null,"code":"import { ChatOpenAI } from \"langchain/chat_models/openai\";\nimport { HumanMessage, SystemMessage } from \"langchain/schema\";\n\n// this class is responsible for sending in the messages from the User and getting a reply from OpenAI\n// it uses a chat/system array that is sent in continously to OpenAI\n\nclass LangchainProcessor {\n  constructor(createChatBotMessage) {\n    this.createChatBotMessage = createChatBotMessage;\n  }\n  async process(newMessage, oldMessages) {\n    // (!!) remember to add your OpenAI API key to the .env file\n    const chat = new ChatOpenAI({\n      temperature: 0,\n      openAIApiKey: process.env.REACT_APP_OPEN_AI_API_KEY\n    });\n    try {\n      const formattedMessages = oldMessages.map(msg => {\n        if (msg.type === \"bot\") {\n          return new SystemMessage(msg.message);\n        } else {\n          return new HumanMessage(msg.message);\n        }\n      });\n\n      // Add the new human message to the list\n      formattedMessages.push(new HumanMessage(newMessage));\n      const result = await chat.predictMessages(formattedMessages);\n\n      // Extract the content from the AIMessage\n      const botResponseContent = result.content;\n      return botResponseContent;\n    } catch (error) {\n      console.error(\"Error processing message with OpenAI:\", error);\n      return \"Sorry, I faced an error processing your message.\";\n    }\n  }\n}\nexport default LangchainProcessor;","map":{"version":3,"names":["ChatOpenAI","HumanMessage","SystemMessage","LangchainProcessor","constructor","createChatBotMessage","process","newMessage","oldMessages","chat","temperature","openAIApiKey","env","REACT_APP_OPEN_AI_API_KEY","formattedMessages","map","msg","type","message","push","result","predictMessages","botResponseContent","content","error","console"],"sources":["/Users/idasilfverskiold/gptSandbox/reactlangchain/sandbox/src/components/LangchainProcessor.js"],"sourcesContent":["import { ChatOpenAI } from \"langchain/chat_models/openai\";\nimport { HumanMessage, SystemMessage } from \"langchain/schema\";\n\n// this class is responsible for sending in the messages from the User and getting a reply from OpenAI\n// it uses a chat/system array that is sent in continously to OpenAI\n\nclass LangchainProcessor {\n    constructor(createChatBotMessage) {\n        this.createChatBotMessage = createChatBotMessage;\n    }\n\n    async process(newMessage, oldMessages) {\n\n        // (!!) remember to add your OpenAI API key to the .env file\n        const chat = new ChatOpenAI({\n            temperature: 0,\n            openAIApiKey: process.env.REACT_APP_OPEN_AI_API_KEY\n        });\n\n        try {\n            const formattedMessages = oldMessages.map(msg => {\n                if (msg.type === \"bot\") {\n                    return new SystemMessage(msg.message);\n                } else  {\n                    return new HumanMessage(msg.message);\n                } \n            });\n\n            // Add the new human message to the list\n            formattedMessages.push(new HumanMessage(newMessage));\n\n            const result = await chat.predictMessages(formattedMessages);\n\n            // Extract the content from the AIMessage\n            const botResponseContent = result.content;\n\n            return botResponseContent;\n\n        } catch (error) {\n            console.error(\"Error processing message with OpenAI:\", error);\n            return \"Sorry, I faced an error processing your message.\";\n        }\n    }\n}\n\nexport default LangchainProcessor;\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,8BAA8B;AACzD,SAASC,YAAY,EAAEC,aAAa,QAAQ,kBAAkB;;AAE9D;AACA;;AAEA,MAAMC,kBAAkB,CAAC;EACrBC,WAAWA,CAACC,oBAAoB,EAAE;IAC9B,IAAI,CAACA,oBAAoB,GAAGA,oBAAoB;EACpD;EAEA,MAAMC,OAAOA,CAACC,UAAU,EAAEC,WAAW,EAAE;IAEnC;IACA,MAAMC,IAAI,GAAG,IAAIT,UAAU,CAAC;MACxBU,WAAW,EAAE,CAAC;MACdC,YAAY,EAAEL,OAAO,CAACM,GAAG,CAACC;IAC9B,CAAC,CAAC;IAEF,IAAI;MACA,MAAMC,iBAAiB,GAAGN,WAAW,CAACO,GAAG,CAACC,GAAG,IAAI;QAC7C,IAAIA,GAAG,CAACC,IAAI,KAAK,KAAK,EAAE;UACpB,OAAO,IAAIf,aAAa,CAACc,GAAG,CAACE,OAAO,CAAC;QACzC,CAAC,MAAO;UACJ,OAAO,IAAIjB,YAAY,CAACe,GAAG,CAACE,OAAO,CAAC;QACxC;MACJ,CAAC,CAAC;;MAEF;MACAJ,iBAAiB,CAACK,IAAI,CAAC,IAAIlB,YAAY,CAACM,UAAU,CAAC,CAAC;MAEpD,MAAMa,MAAM,GAAG,MAAMX,IAAI,CAACY,eAAe,CAACP,iBAAiB,CAAC;;MAE5D;MACA,MAAMQ,kBAAkB,GAAGF,MAAM,CAACG,OAAO;MAEzC,OAAOD,kBAAkB;IAE7B,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC7D,OAAO,kDAAkD;IAC7D;EACJ;AACJ;AAEA,eAAerB,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}